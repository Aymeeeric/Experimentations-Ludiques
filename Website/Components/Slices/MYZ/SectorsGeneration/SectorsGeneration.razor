@page "/"

@using MediatR;
@using Aymeeeric.Website.Components.Slices.MYZ.SectorsGeneration.Queries

@inject IMediator Mediator

<PageTitle>Aymeeeric.dev - Mutant: Year Zero - Génération de secteurs</PageTitle>

<h1 class="ADM_MainTiltle">
    Mutant: Year Zero - Génération de secteurs
</h1>

<FluentStack Orientation="Orientation.Vertical" Width="100%" VerticalGap="50" VerticalAlignment="VerticalAlignment.Center">

    <!-- Formulaire -->
    <FluentGrid Spacing="2" Justify="JustifyContent.FlexStart">
        
        <FluentGridItem xl="3" lg="4" md="5" xs="12">
            <FluentCard AreaRestricted="false">
                <FluentStack Orientation="Orientation.Vertical">
                    <FluentNumberField Min="1" Max="12" Label="Nombre de secteurs" @bind-Value=_numberOfSectorsToGenerate  @ref=firstFocusField></FluentNumberField>
                    <FluentNumberField Min="0" Max="12" Label="Niveau de menace" @bind-Value=_threatLevel></FluentNumberField>
                    <FluentRadioGroup Name="numbers" @bind-Value=_randomMode Label="Génération des environnemets">
                        <FluentRadio Value=GenerationMode.Perlin Disabled="true">Cohérente</FluentRadio>
                        <FluentRadio Value=GenerationMode.Random>Aléatoire</FluentRadio>
                    </FluentRadioGroup>
                    
                    <FluentTextField Label="Seed" @bind-value="_seed"></FluentTextField>
                    
                    <FluentButton IconStart="@(new Icons.Regular.Size16.ArrowClockwise())"
                                  Appearance="Appearance.Accent"
                                  OnClick="@GenerateSectors">        
                        Générer
                    </FluentButton>
                </FluentStack>
            </FluentCard>
        </FluentGridItem>
        
        <FluentGridItem xl="4" lg="5" md="6" xs="12">
            <FluentStack Orientation="Orientation.Vertical">
                <div class="ADM_Text_Justified">
                    <h3>Introduction à l'outil</h3>  
                    <p>Cette apllication a pour objectif de faciliter le travail de la MJ dans le cadre de sa préparation de séances du jeu de rôle <i>Mutant: Year Zero</i>.</p>
                    <p>Elle vise à automatiser au maximum les étapes de création de la Zone, explicitées au <FluentBadge>chapitre 11</FluentBadge> du livre de base...</p>
                    <h3>Remarque importante</h3> 
                    <p>Cette application ne vise pas à se substituer au livre de base (disponible sur le site <a href="https://www.arkhane-asylum.fr/" target="_blank">d'Arkhane Asylum</a>) : elle vise uniquement à faciliter le travail de la MJ.</p>
                    <p>
                        En vue de cet objectif, elle reprend certains éléments du livre de base (<i>ruines</i>, <i>ambiances</i> etc.) pour fluidifier les descriptions - 
                        et donc l'experience de jeu à la table - mais le livre de base reste nécessaire pour obtenir le détail des éléments importants du jeu (comme les <i>menaces</i> ou <i>artefacts</i>) :
                        pour ces éléments, l'application référence simplement les <FluentBadge>pages</FluentBadge> exactes (de l'édition française) ou les trouver.
                    </p>
                </div>
                <div class="ADM_Text_Justified">
                    <p>Vous souhaitant, à toutes et tous, une excellente partie !</p>
                    <p><i>Aymeeeric</i></p>
                </div>
            </FluentStack>
        </FluentGridItem>
        
    </FluentGrid>

    <!-- Résultat -->
    <FluentGrid Spacing="2" Justify="JustifyContent.Center">
        
        @if (_sectors.Any())
        {
            @foreach (var sector in _sectors)
            {
                <FluentGridItem xl="4" lg="6" md="12" xs="12" >
                    
                    <FluentCard>

                        <!-- Titre (Environnement) -->
                        <FluentGrid Justify="JustifyContent.FlexStart" Class="ADM_Card_Header">   
                            <FluentGridItem xl="10" lg="10" md="10" xs="8">
                                <h4>@sector.Title.Environment</h4>
                            </FluentGridItem>
                            <FluentGridItem xl="2" lg="2" md="2" xs="4">
                                <FluentBadge Circular=false Fill="GangreneColor" BackgroundColor="@sector.Title.GangreneColor" Color="white"
                                             Class="ADM_Card_Header_Badge">
                                    <b>Gangrène @sector.Title.GangreneLevel</b>
                                </FluentBadge>
                            </FluentGridItem>
                        </FluentGrid>

                        <!-- Ruines (si présentes) -->
                        <FluentGrid Spacing="0" Justify="JustifyContent.FlexStart" Class="ADM_Card_FluentGrid_With_More_Margin_Bottom">
                            <FluentGridItem xl="2" lg="2" md="2" xs="2">
                                <FluentBadge Appearance=@GetBadgeAppearance(sector.Ruin.IsRuinInSector) Class="ADM_Card_Badge">
                                    @BoolToString(sector.Ruin.IsRuinInSector)
                                </FluentBadge>
                            </FluentGridItem>
                            <FluentGridItem xl="10" lg="10" md="10" xs="10">
                                <h5>Présence de ruines</h5>
                            </FluentGridItem>
                            @if (sector.Ruin.IsRuinInSector)
                            {
                                <FluentGridItem xs="10" Class="ADM_Text_Justified">
                                    <b>@sector.Ruin.RuinName (@sector.Ruin.RuinType) :</b> @sector.Ruin.RuinDefinition
                                </FluentGridItem>
                            }
                        </FluentGrid>

                        <!-- Ambiance (si présente) -->
                        <FluentGrid Spacing="0" Justify="JustifyContent.FlexStart"  Class="ADM_Card_FluentGrid">
                            <FluentGridItem xs="2">
                                <FluentBadge Appearance=@GetBadgeAppearance(sector.Atmosphere.IsAtmosphereInSector) Class="ADM_Card_Badge">
                                    @BoolToString(sector.Atmosphere.IsAtmosphereInSector)
                                </FluentBadge>
                            </FluentGridItem>
                            <FluentGridItem xs="10"><h5>Élément d'ambiance</h5></FluentGridItem>
                            @if (sector.Atmosphere.IsAtmosphereInSector)
                            {
                                <FluentGridItem xs="10" Class="ADM_Text_Justified">
                                    <b>@sector.Atmosphere.AtmosphereName :</b> @sector.Atmosphere.AtmosphereDefinition
                                </FluentGridItem>
                            }
                        </FluentGrid>

                        <FluentDivider Orientation="Orientation.Horizontal" Class="ADM_Card_Divider"></FluentDivider>

                        <!-- Menace (si présente) -->
                        <FluentGrid Spacing="0" Justify="JustifyContent.FlexStart"  Class="ADM_Card_FluentGrid">
                            <FluentGridItem xs="2">
                                <FluentBadge Appearance=@GetBadgeAppearance(sector.Threat.IsThreatInSector) Class="ADM_Card_Badge">
                                    @BoolToString(sector.Threat.IsThreatInSector)
                                </FluentBadge>
                            </FluentGridItem>
                            <FluentGridItem xs="10"><h5>Menace</h5></FluentGridItem>
                            @if (sector.Threat.IsThreatInSector)
                            {
                                <FluentGridItem xs="12">
                                    <FluentStack Orientation="Orientation.Horizontal">
                                        <span><b>@sector.Threat.ThreatType :</b> @sector.Threat.ThreatName</span>
                                        <FluentBadge>@($"P{sector.Threat.ThreatPage}")</FluentBadge>
                                    </FluentStack>
                                </FluentGridItem>
                            }
                        </FluentGrid>

                        <FluentDivider Orientation="Orientation.Horizontal" Class="ADM_Card_Divider"></FluentDivider>

                        <!-- Artefact et babioles (si présents) -->
                        <FluentGrid Spacing="0" Justify="JustifyContent.FlexStart"  Class="ADM_Card_FluentGrid">
                            <FluentGridItem xs="2">
                                <FluentBadge Appearance=@GetBadgeAppearance(sector.Artifact.IsArtifactInSector) Class="ADM_Card_Badge">
                                    @BoolToString(sector.Artifact.IsArtifactInSector)
                                </FluentBadge>
                            </FluentGridItem>
                            <FluentGridItem xs="10"><h5>Artefact</h5></FluentGridItem>
                            @if (sector.Artifact.IsArtifactInSector)
                            {
                                <FluentGridItem xs="12">
                                    <FluentStack Orientation="Orientation.Horizontal">
                                        <span>@sector.Artifact.ArtifactName</span>
                                        <FluentBadge>@($"P{sector.Artifact.ArtifactPage}")</FluentBadge>
                                    </FluentStack>
                                </FluentGridItem>
                            }

                            <FluentGridItem xs="12">
                                <FluentDivider Orientation="Orientation.Horizontal" Class="ADM_Card_Divider_Small"></FluentDivider>
                            </FluentGridItem>

                            <FluentGridItem xs="12">
                                <b>Babioles :</b>
                                <span>@string.Join(", ", sector.Trinket.TrinketsNames)...</span>
                            </FluentGridItem>

                        </FluentGrid>

                    </FluentCard>
                </FluentGridItem>
            }
        }
    </FluentGrid>
    
</FluentStack>

@* IHM *@
@code
{
    FluentNumberField<int> firstFocusField;
    protected override void OnAfterRender(bool firstRender)
    {
        if(firstRender)
        {
            firstFocusField!.FocusAsync();
        }
    }
    
    private Appearance GetBadgeAppearance(bool isSomethingInbBadge)
    {
        return isSomethingInbBadge ? Appearance.Accent : Appearance.Neutral;
    }
}

@* Query *@
@code {

    GenerationMode _randomMode = GenerationMode.Random;
    int _numberOfSectorsToGenerate = 6;
    int _threatLevel = 4;
    string _seed = string.Empty; 
    
    List<Sector> _sectors = new();
    async Task GenerateSectors()
    {
        var generateSectorsQuery = new GenerateSectorsQuery(
            _randomMode,
            _numberOfSectorsToGenerate,
            _threatLevel,
            string.IsNullOrEmpty(_seed) ? DateTime.UtcNow.ToString("yyyy-MM-ddTHH:mm:ss") : _seed
        );

        _sectors = await Mediator.Send(generateSectorsQuery);
    }

}

@* Helpers *@
@code
{
    string BoolToString(bool boolToConvert)
    {
        return boolToConvert ? "Oui" : "Non";
    }
}